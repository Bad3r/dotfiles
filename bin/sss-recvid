#!/usr/bin/env python3

import argparse
import os
import random
import subprocess
import pyperclip


def get_screen_geometry():
    """
    Returns the geometry of the selected window
    """
    return (
        subprocess.check_output(
            ["slop", "-f", "%g;-video_size %wx%h -i +%x,%y"])
        .decode()
        .split(";")
    )


def construct_filename(dict_path):
    """
    Constructs a filename from randomly chosen words in files from the given directory.

    Args:
        dict_path (str): The path to the directory containing the word lists.

    Returns:
        str: The constructed filename.

    """
    with open(os.path.join(dict_path, "eng-adjectives.txt")) as adjs, \
            open(os.path.join(dict_path, "eng-nouns.txt")) as nouns, \
            open(os.path.join(dict_path, "eng-verbs.txt")) as verbs:

        nouns = nouns.readlines()
        adj = random.choice([w for w in adjs.readlines()]).strip()
        noun1 = random.choice([w for w in nouns]).strip()
        verb = random.choice([w for w in verbs.readlines()]).strip()
        noun2 = random.choice([w for w in nouns]).strip()

    return f"{adj}-{verb}-{noun1}-{noun2}.mp4"


def start_screenkey(geometry):
    """
    Starts the Screenkey utility to display keystrokes during screen recording.

    Args:
        geometry (str): A string representing the screen geometry. 
                        string format: <width>x<height>+<x>+<y>

    Returns:
        int: A return code. Returns 0 on success, and a non-zero value on failure.
    """
    width, height, x, y = map(int, geometry.split(
        '+')[0].split('x') + geometry.split('+')[1:])

    # Set screenkey size and position
    sk_width = int(width * 0.4)
    sk_height = 80
    sk_x = x + (width - sk_width) // 2
    sk_y = y + height - sk_height

    screenkey_cmd = [
        "screenkey",
        "--bg-color='#3B4252'",
        "--font-color='#D8DEE9'",
        "--font='MonoLisa'",
        "--vis-shift",
        "--opacity=1",
        "--no-systray",
        "-s", "large",
        "-p", "fixed",
        "-g", f'{sk_width}x{sk_height}+{sk_x}+{sk_y}',
        "2>/dev/null", '&'
    ]
    return os.system(" ".join(screenkey_cmd))


def stop_screenkey():
    """
    Stop the ScreenKey application.

    Returns:
    int: The exit status of the command to kill all ScreenKey processes.
    """
    return subprocess.call(['pkill', 'screenkey'])


def record_video(geometry, file):
    ffmpeg_cmd = [
        "ffmpeg",
        "-loglevel", "quiet",
        "-stats",
        "-rtbufsize", "2140M",
        "-f", "x11grab",
        "-framerate", "10",
        geometry,
        "-c:v", "h264_nvenc",
        "-b:v", "80M",
        "-probesize", "128M",
        "-g", "50",
        "-vf", "'pad=iw+6:ih+6:3:3:color=#4C566A'",
        file,
    ]
    
    # Join the command into a single string for debugging
    ffmpeg_cmd_str = " ".join(ffmpeg_cmd)
    print(f"Executing ffmpeg command: {ffmpeg_cmd_str}")
    
    return os.system(ffmpeg_cmd_str)

def upload(file):
    """
    Uploads the given file to R2 using rclone.

    Args:
        file (str): The path to the file to upload.

    Returns:
        int: The exit code of the rclone command.

    """
    rclone_cmd = [
        "rclone",
        "copy",
        "--quiet",
        "--stats-one-line",
        file,
        "r2:r2b",
    ]
    return subprocess.call(rclone_cmd)


def play_video(file):
    mpv_cmd = [
        "mpv",
        "-really-quiet",
        file,
    ]
    return os.system(" ".join(mpv_cmd))


def parse_args():
    parser = argparse.ArgumentParser(
        description="A script to record a selected window and upload it to R2."
    )
    parser.add_argument(
        "-u",
        "--upload",
        action="store_true",
        help="Upload the recorded video to R2. Implies --copy option to copy the URL.",
    )
    parser.add_argument(
        "-p", "--play", action="store_true", help="Play the recorded video using mpv."
    )
    parser.add_argument(
        "-d",
        "--delete",
        action="store_true",
        help="Delete the recorded video file after uploading or playing",
    )
    parser.add_argument(
        "-s",
        "--screenkey",
        action="store_true",
        help="Use screenkey to display keystrokes.",
    )
    parser.add_argument(
        "-c",
        "--copy",
        action="store_true",
        help="Copy the video filepath or URL to the clipboard",
    )
    parser.add_argument("-v", "--version", action="version",
                        version="%(prog)s 1.2")
    parser.add_argument(
        "-l",
        "--logseq",
        action="store_true",
        help="Resize Logseq window to 720p"
    )

    return parser.parse_args()


def stop_recording():
    # Check if ffmpeg is running
    result = subprocess.run(["pgrep", "ffmpeg"], stdout=subprocess.PIPE)

    # If the result is not empty, then ffmpeg is running
    if result.stdout:
        pid = result.stdout.decode().strip()
        subprocess.run(["kill", pid])
        exit(0)


def main():

    # if ffmpeg is already running; stop it and exit
    stop_recording()

    # Constants
    URL = "https://cdn.unsigned.sh"

    # Directories
    dir_path = os.path.dirname(os.path.realpath(__file__))
    dict_path = os.path.join(dir_path, "dict")
    home_dir = os.path.expanduser("~")
    video_dir = os.path.join(home_dir, "Videos/recording")
    if not os.path.exists(video_dir):
        os.makedirs(video_dir)

    # parse arguments
    args = parse_args()
    print(f"Arguments parsed: {args}")


    # Before selecting a window; if logseq flag is passed resize the window
    if args.logseq:
        print(":: Resizing Logseq window...")
        subprocess.run("i3-msg '[class=\"Logseq\"] floating enable, \
                       resize set 1290 730, move position center'", shell=True)
    
    # select window to record
    geometry = get_screen_geometry()

    if args.screenkey:
        print(":: Starting ScreenKey..")
        start_screenkey(geometry[0])

    filename = construct_filename(dict_path)
    file = f"{video_dir}/{filename}"
    print(f":: Generated filename: {filename}")

    print(":: Click on a window to start recording")
    record_video(geometry[1], file)
    print(":: Stopped Recording")

    if args.copy:
        print(":: Filepath copied to the clipboard")
        pyperclip.copy(file)

    if args.screenkey:
        print(":: Stopping ScreenKey..")
        stop_screenkey()

    if args.upload:
        print(":: Uploading to R2..")
        upload(file)
        print(f"{URL}/{filename}")
        pyperclip.copy(f"{URL}/{filename}")
        print(":: URL copied to clipboard")

    if args.play:
        play_video(file)
    
    if args.delete:
        os.remove(file)
        print(":: Video removed successfully")

    exit(0)

if __name__ == "__main__":
    main()
