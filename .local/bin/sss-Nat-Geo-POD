#!/usr/bin/env python3

from bs4 import BeautifulSoup
from datetime import date
from pathlib import Path
from requests import get


def get_image_url(soup: BeautifulSoup) -> str:
    """Find image link tag and pull out url contained in "content" attribute"""

    image_tag = soup.find("meta", property="og:image")
    return image_tag["content"]


def get_image_name(url: str) -> str:
    """Split image url into list of strings by path separator and return last element"""

    return url.split("/")[-1]


def get_description(soup: BeautifulSoup) -> str:
    """Find description tag and pull out description text in "content" attribute"""

    description_tag = soup.find("meta", attrs={"name": "description"})
    return description_tag["content"]


def newest_file(path: Path, pattern: str = "*.jpg") -> Path:
    """Return newest jpg in passed path"""

    files = path.glob(pattern)
    return max(files, key=lambda x: x.stat().st_ctime)


BASE_PATH = Path("/home/chell/")
INDEX_FILE = "image-details.txt"
URL = "https://www.nationalgeographic.com/photo-of-the-day"

soup = BeautifulSoup(get(URL).text, "lxml")
today = date.today()

image_url = get_image_url(soup)
remote_ngpotd = get_image_name(image_url)
newest_local_ngpotd = newest_file(BASE_PATH)
description_text = get_description(soup)

if newest_local_ngpotd.name != remote_ngpotd:
    response = get(image_url)

    open(BASE_PATH.joinpath(remote_ngpotd), "wb").write(response.content)
    print(f"{remote_ngpotd} downloaded successfully")

    f = open(BASE_PATH.joinpath(INDEX_FILE), "a")
    f.write(f"{today}: {description_text}\n")
    f.close()
else:
    print(f"{remote_ngpotd} already exists!")
